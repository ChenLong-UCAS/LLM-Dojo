{"message": [{"role": "user", "content": "Create a function to calculate the sum of a sequence of integers."}, {"role": "assistant", "content": "# Python code def sum_sequence(sequence): sum = 0 for num in sequence: sum += num return sum"}]}
{"message": [{"role": "user", "content": "Generate a Python code for crawling a website for a specific type of data."}, {"role": "assistant", "content": "import requests import re def crawl_website_for_phone_numbers(website): response = requests.get(website) phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text) return phone_numbers if __name__ == '__main__': print(crawl_website_for_phone_numbers('www.example.com'))"}]}
{"message": [{"role": "user", "content": "Create a nested loop to print every combination of numbers between 0-9, excluding any combination that contains the number 5. Additionally, exclude any combination that contains a repeating digit. Implement the solution without using any built-in functions or libraries to check for repeating digits."}, {"role": "assistant", "content": "Here is an example of a nested loop in Python to print every combination of numbers between 0-9, excluding any combination that contains the number 5 or repeating digits: ```python for i in range(10): # First digit for j in range(10): # Second digit for k in range(10): # Third digit # Checking for the conditions if i != 5 and j != 5 and k != 5 and i != j and i != k and j != k: print(i, j, k) ``` This code will generate and print every combination of three digits between 0-9 that do not contain the number 5 and do not have any repeating digits."}]}
{"message": [{"role": "user", "content": "Generate a Python program that adds two then doubles the result."}, {"role": "assistant", "content": "def double_add(num1, num2): return (num1 + num2) * 2"}]}
{"message": [{"role": "user", "content": "Develop a function in Python that prints out the Pascal's triangle for a given number of rows."}, {"role": "assistant", "content": "def pascal_triangle(n): trow = [1] y = [0] for x in range(max(n, 0)): print(trow) trow=[l+r for l,r in zip(trow + y, y + trow)] return n>=1 pascal_triangle(5)"}]}
{"message": [{"role": "user", "content": "Write a Python program to find all the numbers divisible by a certain number within a certain range."}, {"role": "assistant", "content": "def find_numbers_divisible_by(m, n, divisor): divisible_numbers = [] for i in range(m, n+1): if i % divisor == 0: divisible_numbers.append(i) return divisible_numbers"}]}
